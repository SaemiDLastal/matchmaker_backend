export function newDataSource(config: JpaConfig): Promise<DataSource>

export interface DataSource {
    createContext(): Promise<JpaContext>
    registerRepository(context: JpaContext, repository: Repository): Promise<void>
    release(): void
}

export interface JpaContext {
    query(sql: string, values?: any[]): Promise<any>
    beginTransaction(): Promise<void>
    commit(): Promise<void>
    rollback(): Promise<void>
    release(): void
}

export interface JpaConfig {
    driver?: 'mysql'
    host: string
    port?: number
    user: string
    password: string
    database: string
    logger?: boolean
}

export interface Repository {
    schema: Schema,
    insert(context: JpaContext, entity: any): Promise<any>
    update(context: JpaContext, entity: any): Promise<any>
    save(context: JpaContext, entity: any): Promise<any>
    delete(context: JpaContext, key: any): Promise<any>
    get(context: JpaContext, key: any): Promise<any>
    select(context: JpaContext, specification: Specification, pageRequest: PageRequest): Promise<any>
    count(context: JpaContext, specification: Specification): Promise<number>
}

export interface Schema {
    name: string,
    dynamic: boolean,
    fields: SchemaField[]
}

export interface SchemaField {
    name: string,
    type: 'int' | 'string' | 'text' | 'timestamp' | 'decimal',
    len?: number,
    auto?: boolean
}

export interface PageRequest {
    page?: number,
    size?: number,
    orders?: PageOrder[],
    fields?: string[]
}

export interface PageOrder {
    name: string,
    asc: boolean
}

export interface Specification {
    (builder: Builder, entityProxy: EntityProxy): string
}

export interface Builder {
    and(left: string, right: string): string
    or(left: string, right: string): string
}

export interface EntityProxy {
    [index: string]: EntityFieldProxy
}

export interface EntityFieldProxy {
    equal(value: any): string
    between(min: any, max: any): string
    lessThan(value: any): string
    greaterThan(value: any): string
    isNull(): string
    isNotNull(): string
    notNull(): string
    like(value: any): string
    notLike(value: any): string
    not(value: any): string
    in(value: any): string
    notIn(value: any): string
}
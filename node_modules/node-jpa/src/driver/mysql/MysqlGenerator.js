const SqlGenerator = require('../../jpa/SqlGenerator')
const SchemaUtil = require('../../util/SchemaUtil')
const Columns = require('./Columns')

module.exports = class MysqlGenerator extends SqlGenerator {
  constructor(driver) {
    super()
    this._driver = driver
  }

  encode(value) {
    return this._driver.escape(value)
  }

  getCreate(schema) {
    let fields = schema.fields.map((field, index) => Columns[field.type](field, index === 0, field.auto))
    fields.push(`PRIMARY KEY (\`${schema.fields[0].name}\`)`)
    return `CREATE TABLE \`${schema.name}\` (${fields.join(',')}) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC`
  }

  getAlter(schema, originSchema) {
    let originFields = originSchema.fields.map(field => field.name)
    let diff = schema.fields.map((field, index) => {
      if (index > 0) {
        if (originFields.includes(field.name)) {
          return 'MODIFY ' + Columns[field.type](field)
        } else {
          return 'ADD ' + Columns[field.type](field)
        }
      }
    })
    diff.shift()
    return `ALTER TABLE \`${schema.name}\` ${diff.join(',')}`
  }

  getSave(schema, entity) {
    let insertSql = this.getInsert(schema, entity)
    let updateSql = this.getUpdate(schema, entity)
    let from = updateSql.indexOf('SET ') + 4
    let to = updateSql.lastIndexOf(' WHERE')
    return insertSql + ' ON DUPLICATE KEY UPDATE ' + updateSql.substring(from, to)
  }

  getSelect(schema, where, pageRequest) {
    let fields = '*'
    if (pageRequest && pageRequest.fields) {
      fields = pageRequest.fields.join(',')
    }
    let order = (pageRequest && pageRequest.orders) ? this.getOrders(pageRequest.orders) : false
    let sql = `FROM \`${schema.name}\``
    if (where) {
      sql += ' WHERE ' + where
    }
    if (order) {
      sql += ' ORDER BY ' + order
    }
    if (pageRequest && pageRequest.size) {
      if (!pageRequest.page) {
        pageRequest.page = 0
      }
      let primaryKey = SchemaUtil.getPrimaryKey(schema)
      sql = `SELECT \`${primaryKey}\` ${sql} LIMIT ${pageRequest.page * pageRequest.size}, ${pageRequest.size}`
      sql = `SELECT ${fields} FROM \`${schema.name}\` WHERE \`${primaryKey}\` IN (SELECT \`${primaryKey}\` FROM (${sql}) AS tt)`
      if (order) {
        sql += ' ORDER BY ' + order
      }
    } else {
      sql = `SELECT ${fields} ${sql}`
    }
    return sql
  }
}

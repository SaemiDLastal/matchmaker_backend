const MysqlGenerator = require('./MysqlGenerator')
const JpaBuilder = require('../../jpa/JpaBuilder')
const SchemaUtil = require('../../util/SchemaUtil')

module.exports = class MysqlJpaBuilder extends JpaBuilder {
  constructor(driver) {
    super(new MysqlGenerator(driver))
    this._driver = driver
    this._tables = new Map()
  }

  async loadTableDescription(context, name) {
    let originSchema = this._tables.get(name)
    if (!originSchema) {
      try {
        let fields = (await context.query('desc `' + name + '`')).map(item => {
          return { name: item.Field }
        })
        originSchema = { name, fields }
        this._tables.set(name, originSchema)
      } catch (e) {
        console.info('__table not found')
      }
    }
    return originSchema
  }

  async prepare(context, schema) {
    let originSchema = await this.loadTableDescription(context, schema.name)
    if (originSchema) {
      if (originSchema != schema) {
        await context.query(this.generator.getAlter(schema, originSchema))
      }
    } else {
      await context.query(this.generator.getCreate(schema))
    }
    this._tables.set(schema.name, schema)
  }

  async executeInsert(context, schema, entity) {
    let result = await super.executeInsert(context, schema, entity)
    if (result.insertId > 0) {
      SchemaUtil.setPrimaryValue(schema, entity, result.insertId)
    }
    return entity
  }
}

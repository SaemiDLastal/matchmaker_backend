const Context = require('./Context')
const DRIVERS = {
  mysql: true,
  oracle: false
}

module.exports = class DataSource {
  async initialize(config) {
    if (config.driver === undefined) {
      config.driver = 'mysql'
    }
    this._logger = config.logger
    if (DRIVERS[config.driver]) {
      let Constructor = require('./driver/' + config.driver)
      this._driver = new Constructor(config)
      this._jpaBuilder = await this._driver.getJpaBuilder()
    } else {
      throw new Error('unsupported driver: ' + config.driver);
    }
  }

  async createContext() {
    return new Context(await this._driver.getConnection(), this._logger)
  }

  async registerRepository(context, repository) {
    await this.checkTable(context, repository)
    this._jpaBuilder.build(context, repository)
  }

  async checkTable(context, repository) {
    if (!repository.schema) {
      throw new Error('not found schema in repository')
    }
    if (repository.schema.fields.length === 0) {
      throw new Error('not found fields in schema')
    }
    if (!repository.schema.dynamic) {
      await this._jpaBuilder.prepare(context, repository.schema)
    }
  }

  release() {
    this._driver.release()
  }
}

const SchemaUtil = require('../util/SchemaUtil')

module.exports = class SqlGenerator {
  encode(value) { }
  getCreate(schema) { }
  getAlter(schema, originSchema) { }

  getInsert(schema, entity) {
    let names = []
    let values = []
    for (let i = 0; i < schema.fields.length; i++) {
      let field = schema.fields[i]
      if (Reflect.has(entity, field.name)) {
        names.push(`\`${field.name}\``)
        values.push(this.encode(entity[field.name]))
      }
    }
    return `INSERT INTO \`${schema.name}\` (${names.join(',')}) VALUES (${values.join(',')})`
  }

  getUpdate(schema, entity) {
    let settings = []
    for (let i = 1; i < schema.fields.length; i++) {
      let field = schema.fields[i]
      if (Reflect.has(entity, field.name)) {
        settings.push(`\`${field.name}\` = ${this.encode(entity[field.name])}`)
      }
    }
    if (settings.length > 0) {
      let key = schema.fields[0].name
      let value = this.encode(entity[key])
      return `UPDATE \`${schema.name}\` SET ${settings.join(',')} WHERE ${key} = ${value}`
    }
  }

  getSave(schema, entity) { }

  getDelete(schema, where) {
    let sql = `DELETE FROM \`${schema.name}\``
    if (where) {
      sql += ` WHERE ${where}`
    }
    return sql
  }

  getCount(schema, where) {
    let primaryKey = SchemaUtil.getPrimaryKey(schema)
    let sql = `SELECT COUNT(\`${primaryKey}\`) as value FROM \`${schema.name}\``
    if (where) {
      sql += ' WHERE ' + where
    }
    return sql
  }

  getSelect(schema, where, pageRequest) { }

  getOrders(orders) {
    return orders.map(order => `\`${order.name}\` ${order.asc ? 'ASC' : 'DESC'}`).join(',')
  }
}

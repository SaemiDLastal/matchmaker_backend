module.exports = {
  getOneBy(jpa, where, argumentsLength) {
    return async function (context, ...values) {
      if (argumentsLength !== values.length) {
        throw new Error('illegal arguments')
      }
      let list = await jpa.executeSelect(context, this.schema, where, undefined, values)
      return list.length > 0 ? list[0] : null
    }
  },
  getCountBy(jpa, where, argumentsLength) {
    return async function (context, ...values) {
      if (argumentsLength !== values.length) {
        throw new Error('illegal arguments')
      }
      return await jpa.executeCount(context, this.schema, where, values)
    }
  },
  getAllBy(jpa, where, argumentsLength) {
    return async function (context, ...values) {
      if (argumentsLength !== values.length && argumentsLength !== values.length - 1) {
        throw new Error('illegal arguments')
      }
      let pageRequest = argumentsLength < values.length ? values.pop() : undefined
      return await jpa.executeSelect(context, this.schema, where, pageRequest, values)
    }
  },
  deleteBy(jpa, where, argumentsLength) {
    return async function (context, ...values) {
      if (argumentsLength !== values.length) {
        throw new Error('illegal arguments')
      }
      return await jpa.executeDelete(context, this.schema, where, values)
    }
  },
  exec(sql) {
    return async function (context, values) {
      return await context.query(sql, values)
    }
  }
}
